{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/coding.lessons/2021.10.22 - MENTORING/netflix-baby-yoda/src/pages/TvShowEpisode/TvShowEpisode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './TvShowEpisode.css';\nimport { useParams } from 'react-router-dom';\nimport tvShowsData from '../../api/tvShows';\nimport tvShows from '../../api/tvShows';\nimport { Modal } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TvShowEpisode() {\n  _s();\n\n  const {\n    tvShowId,\n    seasonId,\n    episodeId\n  } = useParams();\n  const [tvShow, setTvShow] = useState({});\n  const [season, setSeason] = useState({});\n  const [episode, setEpisode] = useState({});\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    const getTvShow = tvShowsData.find(el => el.id === tvShowId);\n    setTvShow(getTvShow);\n    const getSeason = getTvShow.seasons.find(el => el.id === seasonId);\n    setSeason(getSeason);\n    const getEpisode = getSeason.episodes.find(el => el.id === episodeId);\n    setEpisode(getEpisode);\n  }, [tvShowId, seasonId, episodeId]);\n  console.log('====================================');\n  console.log(tvShow);\n  console.log(season);\n  console.log(episode);\n  console.log('====================================');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TvShowEpisode\",\n    style: {\n      backgroundImage: `url(${tvShow.image})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", tvShow.title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [season.title, \" - \", episode.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Play\",\n      onClick: () => setIsOpen(!isOpen),\n      children: \"PLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      onHide: () => setIsOpen(false),\n      show: isOpen,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        height: \"400\",\n        src: movieObject.video,\n        title: \"YouTube video player\",\n        frameborder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullscreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TvShowEpisode, \"EKl3YvYI/Q2uZ5hTRPbdKu6WAbU=\", false, function () {\n  return [useParams];\n});\n\n_c = TvShowEpisode;\n\nvar _c;\n\n$RefreshReg$(_c, \"TvShowEpisode\");","map":{"version":3,"sources":["/home/user/Desktop/coding.lessons/2021.10.22 - MENTORING/netflix-baby-yoda/src/pages/TvShowEpisode/TvShowEpisode.js"],"names":["React","useState","useEffect","useParams","tvShowsData","tvShows","Modal","TvShowEpisode","tvShowId","seasonId","episodeId","tvShow","setTvShow","season","setSeason","episode","setEpisode","isOpen","setIsOpen","getTvShow","find","el","id","getSeason","seasons","getEpisode","episodes","console","log","backgroundImage","image","title","movieObject","video"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,qBAAP;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,KAAT,QAAsB,iBAAtB;;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAoCP,SAAS,EAAnD;AAEA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,SAAS,GAAGf,WAAW,CAACgB,IAAZ,CAAkBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUd,QAAnC,CAAlB;AACAI,IAAAA,SAAS,CAACO,SAAD,CAAT;AACA,UAAMI,SAAS,GAAGJ,SAAS,CAACK,OAAV,CAAkBJ,IAAlB,CAAwBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUb,QAAzC,CAAlB;AACAK,IAAAA,SAAS,CAACS,SAAD,CAAT;AACA,UAAME,UAAU,GAAGF,SAAS,CAACG,QAAV,CAAmBN,IAAnB,CAAyBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUZ,SAA1C,CAAnB;AACAM,IAAAA,UAAU,CAACS,UAAD,CAAV;AAEH,GARQ,EAQN,CAACjB,QAAD,EAAWC,QAAX,EAAqBC,SAArB,CARM,CAAT;AAWAiB,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AAGA,sBAEI;AAAK,IAAA,SAAS,EAAC,eAAf;AACI,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAG,OAAMlB,MAAM,CAACmB,KAAM;AAAvC,KADX;AAAA,4BAGI;AAAA,sBAAMnB,MAAM,CAACoB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,iBACKlB,MAAM,CAACkB,KADZ,SACsBhB,OAAO,CAACgB,KAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,OAAO,EAAE,MAAMb,SAAS,CAAC,CAACD,MAAF,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAcI,QAAC,KAAD;AACA,MAAA,MAAM,EAAE,MAAMC,SAAS,CAAC,KAAD,CADvB;AAEA,MAAA,IAAI,EAAED,MAFN;AAGA,MAAA,IAAI,EAAC,IAHL;AAIA,yBAAgB,+BAJhB;AAKA,MAAA,QAAQ,MALR;AAAA,6BAOA;AACA,QAAA,MAAM,EAAC,KADP;AAEA,QAAA,GAAG,EAAEe,WAAW,CAACC,KAFjB;AAGA,QAAA,KAAK,EAAC,sBAHN;AAIA,QAAA,WAAW,EAAC,GAJZ;AAKA,QAAA,KAAK,EAAC,0FALN;AAMA,QAAA,eAAe;AANf;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAuCH;;GAjEuB1B,a;UACsBJ,S;;;KADtBI,a","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './TvShowEpisode.css'\nimport { useParams } from 'react-router-dom'\nimport tvShowsData from '../../api/tvShows'\nimport tvShows from '../../api/tvShows'\nimport { Modal } from \"react-bootstrap\";\n\n\nexport default function TvShowEpisode() {\n    const { tvShowId, seasonId, episodeId } = useParams()\n\n    const [tvShow, setTvShow] = useState({})\n    const [season, setSeason] = useState({})\n    const [episode, setEpisode] = useState({})\n    const [isOpen, setIsOpen] = useState(false)\n\n    useEffect(() => {\n        const getTvShow = tvShowsData.find((el) => el.id === tvShowId)\n        setTvShow(getTvShow)\n        const getSeason = getTvShow.seasons.find((el) => el.id === seasonId)\n        setSeason(getSeason)\n        const getEpisode = getSeason.episodes.find((el) => el.id === episodeId)\n        setEpisode(getEpisode)\n\n    }, [tvShowId, seasonId, episodeId])\n\n\n    console.log('====================================');\n    console.log(tvShow);\n    console.log(season);\n    console.log(episode);\n    console.log('====================================');\n\n\n    return (\n\n        <div className=\"TvShowEpisode\"\n            style={{ backgroundImage: `url(${tvShow.image})` }}\n        >\n            <h1> {tvShow.title} </h1>\n            <h2>\n                {season.title} - {episode.title}\n            </h2>\n            <div className=\"Play\" onClick={() => setIsOpen(!isOpen)} >\n                PLAY\n            </div>\n\n\n\n\n            <Modal\n            onHide={() => setIsOpen(false)}\n            show={isOpen}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            >\n            <iframe\n            height=\"400\"\n            src={movieObject.video}\n            title=\"YouTube video player\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullscreen\n            ></iframe>\n            </Modal>\n\n\n\n\n        </div>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}