{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/coding.lessons/2021.10.22 - MENTORING/netflix-baby-yoda/src/pages/Movie/Movie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moviesData from \"../../api/movies\";\nimport { Modal } from \"react-bootstrap\";\nimport \"./Movie.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Movie() {\n  _s();\n\n  const {\n    pageId\n  } = useParams(); // const [movieObject, setMovieObject] = useState({});\n\n  const [movieObject, setMovieObject] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    /** From React Docs:\n    The function passed to useEffect will run after the render is committed to the screen.\n    */\n    const targetMovie = moviesData.find(currentValue => pageId === currentValue.id);\n    setMovieObject(targetMovie); //console.log(\"targetMovie ==> \", targetMovie);\n  }, [pageId]); //console.log(\"targetMovie outside ==> \", movieObject);\n\n  if (movieObject) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Movie\",\n      style: {\n        backgroundImage: `url(${movieObject.image})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movieObject.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: movieObject.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Play\",\n        onClick: () => setIsOpen(true),\n        children: \"PLAY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        onHide: () => setIsOpen(false),\n        show: isOpen,\n        size: \"lg\",\n        \"aria-labelledby\": \"contained-modal-title-vcenter\",\n        centered: true,\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          height: \"400\",\n          src: movieObject.video,\n          title: \"YouTube video player\",\n          frameborder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullscreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n} // useParams() => { pageId : '????' }\n\n/* return movieObject ? (\n    <div\n      className=\"Movie\"\n      style={{ backgroundImage: `url(${movieObject.image})` }}\n    >\n      <h2>{movieObject.title}</h2>\n      <p>{movieObject.description}</p>\n      <span>PLAY</span>\n    </div>\n  ) : (\n    <div>Loading....</div>\n  );*/\n\n_s(Movie, \"x7pzugtCC2OVbSSRdh5+ZabTADw=\", false, function () {\n  return [useParams];\n});\n\n_c = Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/home/user/Desktop/coding.lessons/2021.10.22 - MENTORING/netflix-baby-yoda/src/pages/Movie/Movie.js"],"names":["React","useEffect","useState","useParams","moviesData","Modal","Movie","pageId","movieObject","setMovieObject","isOpen","setIsOpen","targetMovie","find","currentValue","id","backgroundImage","image","title","description","video"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAO,aAAP;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,SAAS,EAA5B,CAD8B,CAE9B;;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACI,UAAMW,WAAW,GAAGR,UAAU,CAACS,IAAX,CACjBC,YAAD,IAAkBP,MAAM,KAAKO,YAAY,CAACC,EADxB,CAApB;AAGAN,IAAAA,cAAc,CAACG,WAAD,CAAd,CAPc,CAQd;AACD,GATQ,EASN,CAACL,MAAD,CATM,CAAT,CAN8B,CAiB9B;;AAEA,MAAIC,WAAJ,EAAiB;AACf,wBACE;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,eAAe,EAAG,OAAMR,WAAW,CAACS,KAAM;AAA5C,OAFT;AAAA,8BAIE;AAAA,kBAAKT,WAAW,CAACU;AAAjB;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAIV,WAAW,CAACW;AAAhB;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,OAAO,EAAE,MAAMR,SAAS,CAAC,IAAD,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE,QAAC,KAAD;AACE,QAAA,MAAM,EAAE,MAAMA,SAAS,CAAC,KAAD,CADzB;AAEE,QAAA,IAAI,EAAED,MAFR;AAIE,QAAA,IAAI,EAAC,IAJP;AAKE,2BAAgB,+BALlB;AAME,QAAA,QAAQ,MANV;AAAA,+BAQE;AACE,UAAA,MAAM,EAAC,KADT;AAEE,UAAA,GAAG,EAAEF,WAAW,CAACY,KAFnB;AAIE,UAAA,KAAK,EAAC,sBAJR;AAKE,UAAA,WAAW,EAAC,GALd;AAME,UAAA,KAAK,EAAC,0FANR;AAOE,UAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD,GAhCD,MAgCO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF,C,CAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApEwBd,K;UACHH,S;;;KADGG,K","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moviesData from \"../../api/movies\";\nimport { Modal } from \"react-bootstrap\";\nimport \"./Movie.css\";\n\nexport default function Movie() {\n  const { pageId } = useParams();\n  // const [movieObject, setMovieObject] = useState({});\n  const [movieObject, setMovieObject] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    /** From React Docs:\n  The function passed to useEffect will run after the render is committed to the screen.\n*/\n    const targetMovie = moviesData.find(\n      (currentValue) => pageId === currentValue.id\n    );\n    setMovieObject(targetMovie);\n    //console.log(\"targetMovie ==> \", targetMovie);\n  }, [pageId]);\n\n  //console.log(\"targetMovie outside ==> \", movieObject);\n\n  if (movieObject) {\n    return (\n      <div\n        className=\"Movie\"\n        style={{ backgroundImage: `url(${movieObject.image})` }}\n      >\n        <h2>{movieObject.title}</h2>\n        <p>{movieObject.description}</p>\n        <span className=\"Play\" onClick={() => setIsOpen(true)}>\n          PLAY\n        </span>\n\n        <Modal\n          onHide={() => setIsOpen(false)}\n          show={isOpen}\n\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <iframe\n            height=\"400\"\n            src={movieObject.video}\n\n            title=\"YouTube video player\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullscreen\n          ></iframe>\n        </Modal>\n      </div>\n    );\n  } else {\n    return <div>Loading....</div>;\n  }\n}\n\n// useParams() => { pageId : '????' }\n/* return movieObject ? (\n    <div\n      className=\"Movie\"\n      style={{ backgroundImage: `url(${movieObject.image})` }}\n    >\n      <h2>{movieObject.title}</h2>\n      <p>{movieObject.description}</p>\n      <span>PLAY</span>\n    </div>\n  ) : (\n    <div>Loading....</div>\n  );*/\n\n"]},"metadata":{},"sourceType":"module"}